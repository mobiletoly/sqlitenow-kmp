/*
 * Copyright 2025 Anatoliy Pochkin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.goquick.sqlitenow.core

import dev.goquick.sqlitenow.core.sqlite.use
import kotlin.io.path.createFile
import kotlin.io.path.createTempDirectory
import kotlin.test.Test
import kotlin.test.assertTrue
import kotlinx.coroutines.test.runTest

class SqliteNowDatabaseOpenTest {

    @Test
    fun createsSchemaWhenDatabaseFileDidNotExist() = runTest {
        val tempDir = createTempDirectory("sqlitenow-test")
        val dbPath = tempDir.resolve("first-open.db").toString()
        val database = object : SqliteNowDatabase(
            dbName = dbPath,
            migration = TestMigrations(),
            connectionProvider = BundledSqliteConnectionProvider,
        ) {}

        try {
            database.open()
            val connection = database.connection()
            connection.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='person'")
                .use { statement ->
                    assertTrue(statement.step(), "person table should exist after first open")
                }
        } finally {
            database.close()
        }
    }

    @Test
    fun createsSchemaWhenEmptyFileAlreadyExists() = runTest {
        val tempDir = createTempDirectory("sqlitenow-test-preexisting")
        val dbPath = tempDir.resolve("pre-existing.db")
        dbPath.createFile() // creates an empty database file

        val database = object : SqliteNowDatabase(
            dbName = dbPath.toString(),
            migration = TestMigrations(),
            connectionProvider = BundledSqliteConnectionProvider,
        ) {}

        try {
            database.open()
            val connection = database.connection()
            connection.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='person'")
                .use { statement ->
                    assertTrue(statement.step(), "person table should exist after opening pre-existing file")
                }
        } finally {
            database.close()
        }
    }

    private class TestMigrations : DatabaseMigrations {
        override suspend fun applyMigration(conn: SafeSQLiteConnection, currentVersion: Int): Int {
            if (currentVersion == -1) {
                conn.execSQL("CREATE TABLE person (id INTEGER PRIMARY KEY, name TEXT NOT NULL)")
                return 0
            }
            return currentVersion
        }
    }
}
